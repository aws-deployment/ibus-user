name: iBus-user
on: workflow_dispatch
permissions:
  id-token: write
  actions: read
  contents: read
jobs:

  build-push-image-to-ecr:
    runs-on: ubuntu-latest
    environment:
          name: ${{ github.ref_name || 'development' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Task
        run: |
          sed -i "s/<service_name>/$CONTAINER_NAME/g" task-definition.json 
          sed -i "s/<account_id>/$ACCOUNT_ID/g" task-definition.json 
        env:
          CONTAINER_NAME:  ${{ 'ibus-user-' }}${{env.ENV}}${{'-ctr'}}
          ACCOUNT_ID: 838525021275
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_PORT: ${{ vars.PORT }}
          file_name: .env
          fail_on_empty: false

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: App Build and Push
        id: build-image
        env: 
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: ${{vars.ECR_REPOSITORY}}
          IMAGE_TAG: latest
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: task-definition.json
          container-name: ${{ 'ibus-user-' }}${{env.ENV || 'development'}}${{'-ctr'}}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service:  ${{ 'ibus-user-' }}${{env.ENV}}${{'-svc'}}
          cluster: ${{env.ECS_CLUSTER || 'ibus-services-cluster'}}
          wait-for-service-stability: true
